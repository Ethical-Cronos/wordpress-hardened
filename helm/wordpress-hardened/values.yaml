image:
    repository: ghcr.io/riotkit-org/wordpress-hardened
    tag: "" # defaults to {{ .Release.appVersion }}

terminationGracePeriodSeconds: 20
revisionHistoryLimit: 1
podLabels: {}

# -- If .Values.podSecurityContext is not specified, then this section will set securityContext. Those values also applies to the chown init container
permissions:
    uid: 65161
    gid: 65161
podSecurityContext: {}
podDisruptionBudget:
    enabled: false
    spec:
        minAvailable: 1
        maxUnavailable: 0
replicas: 1
rollingUpdate:
    enabled: true
    spec:
        maxSurge: 1
        maxUnavailable: 0

extraConfigMaps: []

db:
    user: riotkit
    name: riotkit
    host: mariadb.db.svc.cluster.local
    port: 3306
    password:
        secretName: db-credentials
        secretKey: password

    administrativeJobs: {}
#        delete-old-comments:
#            image: bitnami/mariadb:10.6
#            isHelmHook: false
#            schedule: "16 1 * * *"
#            # language=mysql
#            sql: |
#                DELETE FROM x WHERE y;

wordpress:
    # -- Should the WordPress automatically update itself periodically? NOTICE! Use with .pv.wp.enabled = true
    autoUpdate: true

    # -- Ingress domain name
    domain: example.org

    # -- Ingress port
    publicPort: "443"

    # -- HTTP/HTTPS
    https: "on"

pv:
    # -- Disable whole root directory volume to have WordPress version managed by the container. Enable it to use updater from the web - in this case the image version would only matter for PHP, NGINX versions, but the WordPress version would be bumped by WordPress by his own
    wp:
        enabled: true
        create: true
        claimName: wp
        size: 256Mi
        #storageClassName: "..."

    # [!!!] Disabling persistence on wp-content may be dangerous, better know what you are doing
    wp_content:
        enabled: true
        claimName: wp-content
        create: true
        size: 1Gi
        #storageClassName: "..."

    # use those following to e.g. mount a custom ConfigMap, or a PVC with some data
    extraVolumes: []
    extraVolumeMounts: []


ingresses:
    - className: nginx
      annotations:
          cert-manager.io/cluster-issuer: letsencrypt-staging
      hosts:
          - paths:
                - path: /
                  pathType: ImplementationSpecific
      tls:
          - hosts: []

# environment variables passed to the container - see Dockerfile and https://github.com/riotkit-org/wordpress-hardened for reference
env: {}

# -- Allows to embed `kind: Secret`, `kind: SealedSecret`, `kind: ExternalSecret` or any other secret. Use it for example with Bitnami's Sealed Secret
secrets:
    enabled: false
    name: wordpress-secrets
    create: false
    apiVersion: bitnami.com/v1alpha1
    kind: SealedSecret
    content: |
        encryptedData:
            ...

resources:
    requests:
        memory: 16Mi
        cpu: 0
    limits:
        memory: 128Mi
        cpu: 1

health:
    allowedSubnets: "10.0.0.0/8"
    liveness:
        enabled: true
        attributes:
            failureThreshold: 2
            periodSeconds: 60
    readiness:
        enabled: true
        attributes:
            failureThreshold: 2
            periodSeconds: 60

service:
    type: ClusterIP
    port: 8080

# =====================================================================
# Web Application Firewall - protects your WP instance against attacks
# Requires Ingress to be created.
# =====================================================================
waf:
    enabled: false
    image:
        repository: ghcr.io/riotkit-org/waf-proxy
        tag: snapshot
    env:
        ENABLE_RULE_WORDPRESS: true
        ENABLE_CRS: true
        ENABLE_RATE_LIMITER: true
        RATE_LIMIT_EVENTS: "30"
        RATE_LIMIT_WINDOW: "5s"

        # due to bug temporarily the CORAZA WAF is disabled, it will be enabled by default in future releases
        ENABLE_CORAZA_WAF: false

    directives: |
        #SecDefaultAction "phase:4,allow,log"
        #SecAction "id:1,pass,log"
        #SecAuditLog /dev/stdout
        #SecDebugLog /dev/stdout
        #SecDebugLogLevel 5
    health:
        liveness:
            enabled: true
            attributes:
                failureThreshold: 2
                periodSeconds: 60

# =====================================================================
# Backup Repository integration
#
# Docs:
#   - Client: https://github.com/riotkit-org/br-backup-maker
#   - Client's controller: https://github.com/riotkit-org/backup-maker-controller
#   - Server: https://github.com/riotkit-org/backup-repository
# =====================================================================
backups:
    enabled: false

    # -- Crontab-like syntax, will be used in a `kind: CronJob` object
    schedule: "16 1 * * *" # 01:16 in the night

    # -- Backup Repository instance URL
    url: https://my-backup-repository-instance.org

    # -- Server side collection id (a backup slot/directory)
    collectionId: ""

    # -- Use MariaDB template version matching your server's version for best compatibility
    templateName: wordpress-mariadb-10.10
    templateType: internal

    # -- Used for GPG encryption. Recommended: Set the same as in user account in Backup Repository
    email: example@example.org

    secrets:
        # -- Login token is a JWT token generated by logging in to Backup Repository (see: https://github.com/riotkit-org/backup-repository/blob/767707ada71781a59b583f3e35f22618cf7c1e44/docs/api/users/README.md#post-apistableauthlogin)
        loginToken:
            secretName: ""  # defaults to .Values.secrets.name
            secretKey: backup-login-token

        # -- GPG key pair - public & private key used for backup encryption. Will generate automatically if not present (make sure to back up created `kind: Secret`)
        gpgKeys:
            createIfNotExists: true
            secretName: backups-gpg

# ========================================================================================
# Volume Syncing Controller support
#
# Docs:
#   - https://github.com/riotkit-org/volume-syncing-controller#volume-syncing-controller)
# ========================================================================================
volumeSyncing:
    enabled: false
    # remotePath: "..."  # defaults to release name
    syncOptions:
        schedule: "@every 8h"
        cleanUp:
            forceLocal: false
            forceRemote: false
            local: false
            remote: true
        allowedDirections:
            fromRemote: true
            toRemote: true
        restoreRemoteOnFirstRun: false
    env:
        # -- Remote storage configuration
        REMOTE_TYPE: s3
        REMOTE_PROVIDER: Minio
        REMOTE_ENDPOINT: http://minio.storage.svc.cluster.local:9000
        REMOTE_ACL: private
        # ... put there more variables ... #
        # see: https://github.com/riotkit-org/volume-syncing-controller#how-it-works
    secret:
        # For example for Minio or AWS this secret should have `REMOTE_ACCESS_KEY_ID` and `REMOTE_SECRET_ACCESS_KEY` keys
        name: "" # defaults to .Values.secrets.name

    automaticEncryption:
        enabled: true
        secretName: sync-encryption

# -- Use PRIVILEGED init container to correct permissions of your volumes
chownInitContainer:
    enabled: true
    image: busybox:1.36.0-musl
